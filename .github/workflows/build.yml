name: build deb

on: 
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4.2.2
        with:
          submodules: true

      - name: Check cache
        run: |
          echo upstream_heads=`git ls-remote https://github.com/roothide/theos | head -n 1 | cut -f 1`-`git ls-remote https://github.com/theos/sdks | head -n 1 | cut -f 1` >> $GITHUB_ENV

      - name: Use cache
        id: cache
        uses: actions/cache@v4.2.1
        with:
          path: ${{ github.workspace }}/theos
          key: ${{ runner.os }}-${{ env.upstream_heads }}

      - name: Prepare Theos
        uses: huami1314/theos-action@main

      - name: Setup GNU Make
        run: |
          echo "$(brew --prefix)/opt/make/libexec/gnubin" >> $GITHUB_PATH

      - name: Build package
        run: |
          rm -rf packages/*
          # 强制输出目录结构（调试用）
          mkdir -p packages
          # 构建时显式指定输出目录
          make package ARCHS=arm64 FINALPACKAGE=1 THEOS_PACKAGE_DIR=packages -j$(sysctl -n hw.ncpu)
          make package THEOS_PACKAGE_SCHEME=rootless ARCHS=arm64 FINALPACKAGE=1 THEOS_PACKAGE_DIR=packages -j$(sysctl -n hw.ncpu)
          make package THEOS_PACKAGE_SCHEME=roothide ARCHS=arm64 FINALPACKAGE=1 THEOS_PACKAGE_DIR=packages -j$(sysctl -n hw.ncpu)

      - name: Collect dylibs
        run: |
          # 递归查找dylib并复制到packages目录
          find ${{ github.workspace }} -name "*.dylib" -exec cp {} packages/ \;
          # 调试：显示产物目录结构
          ls -R packages

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.0
        with:
          name: DYYY
          path: |
            ${{ github.workspace }}/packages/*.deb
            ${{ github.workspace }}/packages/*.dylib
